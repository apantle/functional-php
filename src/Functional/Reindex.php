<?php

/**
 * @package   Functional-php
 * @author    Lars Strojny <lstrojny@php.net>
 * @copyright 2011-2017 Lars Strojny
 * @license   https://opensource.org/licenses/MIT MIT
 * @link      https://github.com/lstrojny/functional-php
 */

namespace Functional;

use Functional\Exceptions\InvalidArgumentException;
use Traversable;

/**
 * Produces a new array of elements by assigning the values to keys generated by a transformation function (callback).
 * Callback arguments will be element, index, collection
 *
 * @template K of array-key
 * @template K2 of array-key
 * @template V
 * @param iterable<K, V> $collection
 * @param callable(V, K, iterable<K, V>): K2 $callback
 * @return array<K2, V>
 * @psalm-pure
 */
function reindex($collection, callable $callback): array
{
    InvalidArgumentException::assertCollection($collection, __FUNCTION__, 1);

    $aggregation = [];

    foreach ($collection as $index => $element) {
        $aggregation[$callback($element, $index, $collection)] = $element;
    }

    return $aggregation;
}
